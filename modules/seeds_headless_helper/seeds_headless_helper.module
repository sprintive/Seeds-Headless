<?php 

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use GuzzleHttp\Exception\GuzzleException;



const X_HEADER_SECRET = 'X-DRUPAL-API-SECRET';

/**
 * Implements hook_entity_base_field_info().
 */
function seeds_headless_helper_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  $fields['canonical'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Canonical'))
    ->setDescription(t('The full path'))
    ->setCustomStorage(TRUE)
    ->setTargetEntityTypeId($entity_type->id())
    ->setComputed(TRUE)
    ->setInternal(FALSE)
    ->setClass('\Drupal\seeds_headless_helper\FullPathComputedField');

  if ($entity_type->id() == 'node' || $entity_type->id() === 'taxonomy_term') {
    $fields['languages'] = BaseFieldDefinition::create('string_long')
      ->setLabel(t('Languages'))
      ->setDescription(t('The links for languages'))
      ->setCustomStorage(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
      ->setComputed(TRUE)
      ->setInternal(FALSE)
      ->setClass('\Drupal\seeds_headless_helper\LanguagesComputedField');

    $fields['bundle_id'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Bundle'))
      ->setDescription(t('The bundle'))
      ->setCustomStorage(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
      ->setComputed(TRUE)
      ->setInternal(FALSE)
      ->setClass('\Drupal\seeds_nseeds_headless_helperextjs\BundleComputedField');

    $fields['bundle_label'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Bundle Label'))
      ->setDescription(t('The bundle label'))
      ->setCustomStorage(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
      ->setComputed(TRUE)
      ->setInternal(FALSE)
      ->setClass('\Drupal\seeds_headless_helper\BundleLabelComputedField');

    $fields['breadcrumbs'] = BaseFieldDefinition::create('string_cacheable')
      ->setLabel(t('Breadcrumbs'))
      ->setDescription(t('The breadcrumbs'))
      ->setCustomStorage(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
      ->setComputed(TRUE)
      ->setInternal(FALSE)
      ->setClass('\Drupal\seeds_headless_helper\BreadcrumbsComputedField');

    // Get the layout field config for the node bundle. field.field.node.BUNDLE.layout_builder__layout.
    $fields['layout_builder_serialized'] = BaseFieldDefinition::create('string_cacheable')
      ->setLabel(t('Layout Builder'))
      ->setDescription(t('The layout builder'))
      ->setCustomStorage(TRUE)
      ->setTargetEntityTypeId($entity_type->id())
      ->setComputed(TRUE)
      ->setInternal(FALSE)
      ->setClass('\Drupal\seeds_headless_helper\LayoutBuilderComputedField');
  }

  $fields['menu_items'] = BaseFieldDefinition::create('string_cacheable')
    ->setLabel(t('Menu Items'))
    ->setDescription(t('The menu items'))
    ->setCustomStorage(TRUE)
    ->setTargetEntityTypeId($entity_type->id())
    ->setComputed(TRUE)
    ->setInternal(FALSE)
    ->setClass('\Drupal\seeds_headless_helper\MenuItemsComputedField');

  $fields['parent_menu_title'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Parent Menu Title'))
    ->setDescription(t('The parent menu title'))
    ->setCustomStorage(TRUE)
    ->setTargetEntityTypeId($entity_type->id())
    ->setComputed(TRUE)
    ->setInternal(FALSE)
    ->setClass('\Drupal\seeds_headless_helper\ParentMenuTitleComputedField');

  $fields['parent_menu_title'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Parent Menu Title'))
    ->setDescription(t('The parent menu title'))
    ->setCustomStorage(TRUE)
    ->setTargetEntityTypeId($entity_type->id())
    ->setComputed(TRUE)
    ->setInternal(FALSE)
    ->setClass('\Drupal\seeds_headless_helper\ParentMenuTitleComputedField');

  $fields['parent_summary'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Parent Summary'))
    ->setDescription(t('The parent menu summary'))
    ->setCustomStorage(TRUE)
    ->setTargetEntityTypeId($entity_type->id())
    ->setComputed(TRUE)
    ->setInternal(FALSE)
    ->setClass('\Drupal\seeds_headless_helper\ParentMenuSummaryComputedField');

  $fields['parent_canonical'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Parent canonical'))
    ->setDescription(t('The parent menu canonical'))
    ->setCustomStorage(TRUE)
    ->setTargetEntityTypeId($entity_type->id())
    ->setComputed(TRUE)
    ->setInternal(FALSE)
    ->setClass('\Drupal\seeds_headless_helper\ParentMenuCanonicalComputedField');
    
  $fields['bundle_redirect'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Bundle Redirect'))
    ->setDescription(t('Redirect for bundle defualt'))
    ->setCustomStorage(TRUE)
    ->setTargetEntityTypeId($entity_type->id())
    ->setComputed(TRUE)
    ->setInternal(FALSE)
    ->setClass('\Drupal\seeds_headless_helper\BundleRedirectComputedField');

  return $fields;
}

/**
 * Implements hook_entity_update().
 */
function seeds_headless_helper_entity_update(EntityInterface $entity) {
  $allow_clearing = &drupal_static('seeds_nextjs_allow_clearing');
  $allow_clearing = TRUE;
}

/**
 * Implements hook_rebuild().
 */
function seeds_headless_helper_rebuild() {
  $flush_cache_on_rebuild = (bool) \Drupal::config('seeds_headless_helper.settings')->get('flush_cache_on_rebuild');

  if (!$flush_cache_on_rebuild) {
    return;
  }

  /** @var \Drupal\seeds_headless_helper\SeedsNextJsRequesterInterface $requester */
  $requester = \Drupal::service('seeds_headless_helper.requester');

  try {
    $requester->request('/api/flush-cache', 'POST');
  } catch (GuzzleException $e) {
    \Drupal::logger('seeds_headless_helper')->error($e->getMessage());
    \Drupal::messenger()->addError(t('Failed to flush the cache in NextJS server.'));
  }
}
